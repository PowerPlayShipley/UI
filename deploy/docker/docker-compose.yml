version: '3.8'

services:
  traefik:
    # Use the latest v2.2.x Traefik image available
    image: traefik:v2.2
    depends_on:
      - conf
      - fines
    ports:
      # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - 80:80
    labels:
      ## TRAEFIK LABELS
      # Enable Traefik for this service, to make it available in the public network
      traefik.enable: "true"
      # Use the traefik-public network (declared below)
      traefik.docker.network: traefik-public
      # Use the custom label "traefik.constraint-label=traefik-public"
      # This public Traefik will only use services with this label
      # That way you can add other internal Traefik instances per stack if needed
      traefik.constraint-label: traefik-public
      # traefik-http will set the admin dashboard to use `/`
      traefik.http.routers.traefik-public-http.rule: PathPrefix(`/`)
      traefik.http.routers.traefik-public-http.entrypoints: http
      # Define the port inside of the Docker service to use
      traefik.http.services.traefik-public.loadbalancer.server.port: 8080
      # Use the special Traefik service api@internal with the web UI/Dashboard
      traefik.http.routers.traefik-public-http.service: api@internal
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log.level=DEBUG
      # Enable the Dashboard and API
      - --api
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

  conf:
    image: ghcr.io/powerplayshipley/conf:master
    container_name: conf
    depends_on:
      - zipkin
      - mongo
    environment:
      # Add tracing
      - ZIPKIN=http://zipkin:9411
      # Connect to the datastore
      - DATABASE_URI=mongo:27017/conf
    networks:
      - tracing
      - storage
      - traefik-public
    labels:
      ## TRAEFIK LABELS
      # Enable Traefik for this service, to make it available in the public network
      traefik.enable: "true"
      # Use the traefik-public network (declared below)
      traefik.docker.network: traefik-public
      # Use the custom label "traefik.constraint-label=traefik-public"
      # This public Traefik will only use services with this label
      # That way you can add other internal Traefik instances per stack if needed
      traefik.constraint-label: traefik-public
      # Router
      traefik.http.routers.conf-http.rule: Host(`conf.api.localhost`)
      traefik.http.routers.conf-http.entrypoints: http
      traefik.http.services.conf.loadbalancer.server.port: 3000
  fines:
    image: ghcr.io/powerplayshipley/fines:master
    container_name: fines
    depends_on:
      - zipkin
      - mongo
    environment:
      # Add tracing
      - ZIPKIN=http://zipkin:9411
      # Connect to the datastore
      - DATABASE_URI=mongo:27017/fines
    networks:
      - tracing
      - storage
      - traefik-public
    labels:
      ## TRAEFIK LABELS
      # Enable Traefik for this service, to make it available in the public network
      traefik.enable: "true"
      # Use the traefik-public network (declared below)
      traefik.docker.network: traefik-public
      # Use the custom label "traefik.constraint-label=traefik-public"
      # This public Traefik will only use services with this label
      # That way you can add other internal Traefik instances per stack if needed
      traefik.constraint-label: traefik-public
      # Router
      traefik.http.routers.fines-http.rule: Host(`fines.api.localhost`)
      traefik.http.routers.fines-http.entrypoints: http
      traefik.http.services.fines.loadbalancer.server.port: 3000

  zipkin:
    image: ghcr.io/openzipkin/zipkin:${ZIPKIN_TAG:-latest}
    environment:
      # For healthcheck so it works w/ the bellow command
      - HEALTHCHECK_IP=127.0.0.1
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - 9411:9411
      # Uncomment to enable debug logging
    command: --logging.level.zipkin2=DEBUG --logging.level.zipkin=DEBUG
    # Need to overwrite the default one since it seems to timeout even even when healthy
    healthcheck:
      test: [ "CMD", "docker-healthcheck" ]
      interval: 30s
      timeout: 30s
      retries: 4
      start_period: 30s
    networks:
      - tracing

  mongo:
    image: mongo:4.4.4
    volumes:
      - mongo:/data/db
    networks:
      - storage

volumes:
  mongo: { }

networks:
  storage: {}
  tracing: {}
  traefik-public:
    external: true
